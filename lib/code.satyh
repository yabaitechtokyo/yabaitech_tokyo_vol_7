@require: pervasives
@require: list
@require: color
@require: gr
@require: vdecoset
@require: base/option-ext

module Code2 : sig

  val +code : [int?; string] block-cmd
  val +console : [int?; string] block-cmd
  val \code : [string] inline-cmd
  val \console : [string] inline-cmd
  val \d-code : [string] inline-cmd

end = struct

  let code-fill-color = Gray(1.0)
  let code-stroke-color = Gray(0.25)
  let console-fill-color = Gray(0.25)


  let decoset-code =
    let deco (x, y) w h d =
      [ fill code-stroke-color (Gr.rectangle (x, y -' d) (x +' 2pt, y +' h))]
    in
    (deco, deco, deco, deco)


  let decoset-console =
    let deco (x, y) w h d =
      [ fill console-fill-color (Gr.rectangle (x, y -' d) (x +' w, y +' h)) ]
    in
      (deco, deco, deco, deco)


  let set-code-font ctx =
    ctx |> set-font Latin (`fonts-dejavu:DejaVuSansMono`, 1., 0.)
    |> set-font Kana (`fonts-noto-sans-cjk-jp:NotoSansMonoCJKjp-Regular`, 1., 0.)
    |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansMonoCJKjp-Regular`, 1., 0.)
    |> set-hyphen-penalty 100000

  let scheme decoset txtcolor ctx code indent =
    let pads = (15pt, 10pt, 10pt, 10pt) in
    block-frame-breakable ctx pads decoset (fun ctx -> (
      let fontsize = (get-font-size ctx) *' 0.8 in
      let ctx = ctx |> set-code-font
                    |> set-leading (fontsize *' 1.875)
                    |> set-font-size fontsize in
      let charwid = get-natural-width (read-inline ctx {0}) in
      let ctx-code =
        ctx |> set-space-ratio (charwid /' fontsize) 0. 0.
            |> set-text-color txtcolor
      in

      let lstraw = split-into-lines code in
      let lst =
        match lstraw with
        | []        -> lstraw
        | x :: []   -> lstraw
        | _ :: tail -> tail
      in
      let ib-code =
        lst |> List.fold-left-adjacent (fun ibacc (i, s) _ optnext -> (
          let ib-last =
            match optnext with
            | Some(_) -> inline-fil ++ discretionary 0 (inline-skip ((get-text-width ctx) *' 2.)) inline-nil inline-nil
            | None    -> inline-fil
          in
          let ib =
            inline-skip (charwid *' (float (i + indent)))
              ++ read-inline ctx-code (embed-string s)
              ++ ib-last
          in
            ibacc ++ ib
        )) inline-nil
      in
        line-break true true ctx ib-code
    ))


  let-block ctx +code ?:indent-opt code =
    let indent = Option.unwrap-or 0 indent-opt in
    scheme decoset-code (Gray(0.25)) ctx code indent


  let-inline ctx \d-code code =
    inline-fil ++ embed-block-breakable ctx
      (read-block ctx '<+code(code);>)


  let-block ctx +console ?:indent-opt code =
    let indent = Option.unwrap-or 0 indent-opt in
    scheme decoset-console Color.white ctx code indent


  let-inline ctx \console code =
    inline-fil ++ embed-block-breakable ctx
      (read-block ctx '<+console(code);>)


  let-inline ctx \code code =
    script-guard Latin
      (read-inline (ctx |> set-code-font) (embed-string code))

end
