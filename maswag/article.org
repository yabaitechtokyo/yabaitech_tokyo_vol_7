#+TITLE: チルノのパーフェクトフォワーディング (完全転送) 教室
#+AUTHOR: MasWag

* COMMENT Materials

** https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.

** https://qiita.com/rinse_/items/cffa87016b7de49391ae

** https://timsong-cpp.github.io/cppwp/n3337/basic.lval

** https://cpplover.blogspot.com/2009/11/rvalue-reference_23.html

** NRVO?

* はじめに

#+begin_quote
みんなぁ～！　

C++11、 (だいたい) ⑨ 周年だよ！

\ruby[`あたい`]{|値|}みたいな天才目指して、

頑張っていってねー！
#+end_quote

** コメント

この記事はC++11のパーフェクトフォワーディングについての記事です。これを読んで何かがわかるのかは良くわからないですけど生温かい視線で見ていただけると幸いです。真面目に理解しようと思ったら別の記事を読んだ方が良いです。

* rvalue と lvalue

#+begin_quote
キラキラ　C++

輝く rvalue

参照　\ruby[`右辺値`]{|rvalue|}　もなんとかして入ろう

関数 変数　トップ目指して GO GO!!\footnote{この記事はC++11についての記事です。Go言語は関係ない}
#+end_quote

** 解説

C や C++ には rvalue (右辺値) と lvalue (左辺値) があります。元々は代入の左辺に置くことのできる値が lvalue (左辺値)、右辺にしか置けない値が rvalue (右辺値) という非常にわかりやすい区別でしたし、「参照」といえば左辺値の参照のことでした。

#+BEGIN_SRC c++
  int return_int() {
    return 10;
  }
  void lvalue_reference(void) {
    // C++11より前は、右辺にある値がrvalueで左辺にある値がlvalueだった (非常に明快で良い)
    int alice_margatroid = return_int();
    // 当たり前だが、lvalueの参照を取ることができる
    int& pc98_alice = alice_margatroid; // 旧作のアリスはWin版のアリス・マーガトロイドと同一人物(らしい)
  }
#+END_SRC

ところが C++11で、rvalue でrvalue 参照 (右辺値参照) という左辺に置くことのできる rvalue が登場しました…という話を次の節でしていきます。

* rvalue 参照の例

#+begin_quote
バーカ！バーカ！バーカ！バーカ！バーカ！バーカ！)

チルノ「ちょっ…違っ…rvalueじゃないもん！」

(バーカ！バーカ！　バーカ！バーカ！バーカ！バーカ！)

チルノ「左辺にある方がlvalueなのよぉ！」
#+end_quote

#+BEGIN_SRC c++
  void rvalue_reference(void) {
    // C++11以降では&&でrvalueの参照も取ることができる様になった
    // chirnoは左辺にあるけどrvalueの参照なのでrvalue (正確にはeXpiring value、xvalue)
    // rvalue 参照はrvalueだけどlife timeが延長されて、式の外に出ても使うことができる。
    int&& chirno = return_int();
#+END_SRC

#+begin_quote
(バーカ！バーカ！バーカ！バーカ！バーカ！バーカ！)

チルノ「なにようるさいわね　このrvalueっ！」

(バーカ！バーカ！バーカ！バーカ！)

ピチューン (life timeが終わって死んだ音)
#+end_quote

#+BEGIN_SRC c++
    // 普通のrvalue (正確にはprvalue) は式が終わるとlife timeが終わる
    return_int();
    // ここでchirnoのlife timeが消える
    // 一方 return chirno; の様にすれば rvalue 参照 を返して引き続きlife timeを伸ばすこともできる
  }
#+END_SRC

** 解説

C++11ではこれまで通りのrvalue (prvalue) に加えてrvalueの参照を作ることができる様になりました。 rvalue なのに参照とは？という点はとりあえず置いておいて、 rvalue の参照を使うことで rvalue を式の外でも使うことができる様になりました。

* rvalueの参照の存在意義: 無駄なcopyを防ぐ
  :PROPERTIES:
  :header-args: :noweb-ref PREVENT_COPY
  :END:

ここでは以下の =Bus= クラスを使います。

#+BEGIN_SRC c++
  class Bus {
  private:
    char * ptr; // C++11以降であればスマートポインタを使うべき
  public:
    Bus() {
      std::cout << "default constructor" << "\n";

      ptr = new char[3];
      // 本当は何か意味のあることをやる
    }
    // C++03以前でもできた、コピーコンストラクタ
    Bus(Bus const & bus) {
      std::cout << "copy constructor" << "\n";
      ptr = new char[3];
      // 受け取ったオブジェクトをコピーする
      std::copy(ptr, ptr + 3, bus.ptr);
    }
    // C++11以降でできる様になった、ムーブコンストラクタ
    // rvalueの参照を受け取った場合、受け取ったオブジェクトを破壊しても良い
    Bus(Bus && bus) {
      std::cout << "move constructor" << "\n";
      // 受け取ったオブジェクト中のptrをムーブして破壊する
      ptr = bus.ptr;
      bus.ptr = nullptr;
    }
    void print_ptr() {
      std::cout << std::hex << reinterpret_cast<size_t>(ptr) << "\n";
    }
    bool is_null() {
      return ptr == nullptr;
    }
    ~Bus() {
      delete [] ptr;
    }
  };
#+END_SRC

#+begin_quote
紅魔館からバスが出て始めに3人乗りました
#+end_quote

#+BEGIN_SRC c++
  void copy_and_move() {
    Bus koumakan = Bus(); // 内部で charが3回newされる
    koumakan.print_ptr(); // -> 7f8aa9405a80
#+END_SRC

#+begin_quote
白玉楼にコピーして半人(はんじん)だけ乗りました
#+end_quote

#+BEGIN_SRC c++
    Bus hakugyokurou = Bus(static_cast<const Bus&>(koumakan)); // コピーコンストラクタ。static_castは不要
    koumakan.print_ptr(); // -> 7f8aa9405a80
    hakugyokurou.print_ptr(); // -> 7f8aa9405a90
#+END_SRC

#+begin_quote
八雲さん家にムーブして 結局紅魔の乗客何人だ？
#+end_quote

#+BEGIN_SRC c++
    Bus yakumo = Bus(static_cast<Bus&&>(koumakan)); // ムーブコンストラクタ。これ以降でkoumakanを使ってはいけない
#+END_SRC

#+begin_quote
答えは答えは　0人　0人

なぜならなぜなら　そ・れ・は

メモリ操作でムーブエンド
#+end_quote

#+BEGIN_SRC c++
  // koumakan.ptr は nullptr なので 0が出力される
  koumakan.print_ptr(); // -> 0
  hakugyokurou.print_ptr(); // -> 7f8aa9405a90
  // 元々 koumakan.ptr だったアドレスは yakumo.ptr に移った
  yakumo.print_ptr();  // -> 7f8aa9405a80
}
#+END_SRC

** 解説

rvalue の参照ですが、無駄なメモリ上のcopyを防ぐために使います。より正確に言うと、 rvalue の参照として渡されたオブジェクトは破壊してもよい、というおやくそくがあります。 =int= や =double= などのプリミティブ型の場合は「破壊」と言っても特に何も破壊するものもありませんが、例えば上記例の =Bus= の場合には与えられたオブジェクトを破壊することで、コピーコンストラクタにある様にメモリの中身をコピーする代わりに、ムーブコンストラクタにある様にポインタの取り替えだけでオブジェクトを生成することができます。

* std::move

#+begin_quote
キャストに　意味など無いわ

rvalue 立てば　いいのよ

std::moveがあれば　な・ん・で・も 1 2 9!
#+end_quote

#+NAME: MOVE
#+BEGIN_SRC c++
  void copy_and_move2() {
    Bus koumakan = Bus(); // 内部で charが3回newされる
    koumakan.print_ptr();

    Bus hakugyokurou = Bus(koumakan); // コピーコンストラクタ。static_castは不要
    koumakan.print_ptr();
    hakugyokurou.print_ptr();
    Bus yakumo = Bus(std::move(koumakan)); // ムーブコンストラクタ。これ以降でkoumakanを使ってはいけない
    koumakan.print_ptr(); // koumakan.ptr は nullptr なので 0が出力される
    hakugyokurou.print_ptr();
    yakumo.print_ptr(); // 元々 koumakan.ptr だったアドレスは yakumo.ptr に移った
  }
#+END_SRC

** 解説

前述の例では =static=cast<Bus&&>(koumakan)= と書くことで =koumakan= の rvalue 参照を得ていましたが、これを毎回書くのはなかなか長いです。そこで出てくるのが標準ライブラリの =std::move= です。結局やっていることは =static_cast= と同じですが、 =std::move= を使うことで前述の例を以下の様に短かく書くことができます。

* Universal参照: みんな大好きテンプレート

ここからは rvalue 参照や lvalue 参照とテンプレートの関係について見ていきます。

#+begin_quote
くるくる　template　ぐるぐる　頭回る

だって　\ruby[`つぶら目玉`]{|&|}　二つ(まで)しかないのに

三本の \ruby[`針`]{|&|} なんて　ちんぷんかん
#+end_quote

#+NAME: UNIVERSAL_REFERENCE
#+BEGIN_SRC c++
  template<typename T>
  void print_if_ref(T&&) { // T 自体は lvalue 参照か 参照ではない型になる。今回の例では T は int& か intのどちらかになる
    // この static_assert の中身はC++17が必要
    static_assert(std::disjunction<std::negation<std::is_reference<T>>, std::is_lvalue_reference<T>>::value, "T is not an rvalue reference."); // T自体は参照ならばつねに lvalue の参照になる
    if (std::is_lvalue_reference<T&&>::value) { // T が int& の場合、 T&& は int& になる (T&&& -> T& と私は覚えた)
      std::cout << "lvalue ref" << std::endl;
    } else if(std::is_rvalue_reference<T&&>::value) { // T が int の場合、 T&& は int&& になる
      std::cout << "rvalue ref" << std::endl;
    }
  }

  void universal() {
    int chirno = 9;
    print_if_ref(chirno); // -> lvalue ref
    print_if_ref(9); // -> rvalue ref
    int& chirno_ref = chirno;
    print_if_ref(chirno_ref); // -> lvalue ref
  }
#+END_SRC

** 解説

みんな大好きテンプレート、 rvalue 参照とはどう組み合わせれば良いでしょうか？より具体的には、 lvalue を渡したら lvalue の参照として、rvalue を渡したら rvalue の参照として扱える様なテンプレート関数を書きたいです。

ここで出てくるのがUniversal参照です。Universal参照ではテンプレート引数 =T= に対して =T&&= と書くことで、 =T= が lvalue の場合は lvalue の参照に、 =T= が rvalue の場合は rvalue の参照として扱われます。

なお、Universal参照はテンプレートのみではなく、C++11で意味の変わった =auto= でも同様に使うことができます。

* パーフェクトフォワーディング

#+begin_quote
次々　参照出る　まだまだ　授業続く

凍る　部屋の中

参照の左辺も右辺も　気にせず

ゆっくりしていってね!!!
#+end_quote

#+NAME: PERFECT_FORWARDING
#+BEGIN_SRC c++
  template<typename T>
  void universal_pass(T&& a) {
    print_if_ref(a); // そのまま渡す
  }

  template<typename T>
  void move_pass(T&& a) {
    print_if_ref(std::move(a)); // std::moveで渡す
  }

  template<typename T>
  void perfect_forwarding_pass(T&& a) {
    print_if_ref(std::forward<T>(a)); // std::forwardで渡す
  }

  void perfect_forward() {
    int chirno = 9;
    // そのまま渡す。仮引数は lvalue として解釈される。
    universal_pass(chirno); // -> lvalue ref
    universal_pass(9); // -> lvalue ref

    // std::move で渡す。std::moveでは rvalue の参照にキャストするので、rvalueとして渡される。
    move_pass(chirno); // -> rvalue ref
    move_pass(9); // -> rvalue ref

    // std::forward で渡す。受け取った変数が lvalue の参照か rvalue の参照かに応じて適切に関数に渡すことができる。
    perfect_forwarding_pass(chirno); // -> lvalue ref
    perfect_forwarding_pass(9); // -> rvalue ref
  }
#+END_SRC

** 解説

さて、ついにタイトルにもある perfect forwarding (完全転送) が出てきました。

Universal参照で受け取った、 lvalue か rvalue のどちらの参照かわからない変数を別の関数に渡す場合はどうしたら良いでしょうか。そのまま渡せば良い様な気もしますが、仮引数は lvalue として扱われてしまうため、 rvalue の参照を受け取ったときも lvalue として渡してしまいますし、じゃあ std::move で渡せば良いかというと、今度は rvalue の参照にキャストしてしまうので lvalue の参照を受け取った場合でも rvalue の参照として渡してしまいます。

ここで出てくるのが =std::forward= です。 =std::forward= は =T= の値を見て上手い具合にキャストをしてくれるので、受け取った変数が lvalue か rvalue のどちらの参照なのかに応じて、適切に渡すことができます。なお、 =std::forward= の中身はテンプレートの特殊化で頑張って実装している様です。

* まとめ

#+begin_quote
もうバカでいいわよ！知らないっ！
#+end_quote

* COMMENT Appendix

** Motivation of rvalue reference

#+BEGIN_SRC C++ :noweb yes :results output replace
  <<PREVENT_COPY>>

  int main(int argc, char *argv[])
  {
    copy_and_move();
    return 0;
  }

#+END_SRC

#+RESULTS:
: default constructor
: 7f8aa9405a80
: copy constructor
: 7f8aa9405a80
: 7f8aa9405a90
: move constructor
: 0
: 7f8aa9405a90
: 7f8aa9405a80

** std::move
  :PROPERTIES:
  :header-args: :C :flags "-std=c++17"
  :END:

#+BEGIN_SRC C++ :noweb yes :results output replace :includes "<iostream> <algorithm>"
  <<PREVENT_COPY>>
  <<MOVE>>

  int main(int argc, char *argv[])
  {
    copy_and_move2();
    return 0;
  }

#+END_SRC

#+RESULTS:
: default constructor
: 7fbffcc05a80
: copy constructor
: 7fbffcc05a80
: 7fbffcc05a90
: move constructor
: 0
: 7fbffcc05a90
: 7fbffcc05a80

** Universal references
  :PROPERTIES:
  :header-args: :C :flags "-std=c++17"
  :END:

#+BEGIN_SRC C++ :noweb yes :results output replace :includes "<iostream> <algorithm>"
  <<UNIVERSAL_REFERENCE>>

  int main(int argc, char *argv[])
  {
    universal();
    return 0;
  }

#+END_SRC

#+RESULTS:
: lvalue ref
: rvalue ref
: lvalue ref


** Perfect forwarding
  :PROPERTIES:
  :header-args: :flags "-std=c++17"
  :END:

#+BEGIN_SRC C++ :noweb yes :results output replace :includes "<iostream> <algorithm>"
<<UNIVERSAL_REFERENCE>>
<<PERFECT_FORWARDING>>

  int main(int argc, char *argv[])
  {
    perfect_forward();
    return 0;
  }
#+END_SRC

#+RESULTS:
: lvalue ref
: lvalue ref
: rvalue ref
: rvalue ref
: lvalue ref
: rvalue ref

* COMMENT Omitted 

** (バーカ！バーカ！バーカ！バーカ！バーカ！バーカ！)
チルノ「だからバカじゃないって言ってるでしょ！」
(バーカ！バーカ！バーカ！バーカ！バーカ！バーカ！)
チルノ「いい加減にしないと冷凍するわよ！」
(バーカ！バーカ！バーカ！バーカ！バーカ！バーカ！)
チルノ「そして粉々になって死ねばいいのよ！」
(バーカ！バーカ！バーカ！バーカ！)

** 霊夢んとこの100万円の壷を誰かが割っちゃった
永遠亭のえーりんが弁償しに来ましたよ
知らんぷりのイタズラてゐ 結局 賠償金額いくら？
答えは答えは　0円　0円
なぜならなぜなら　そ・れ・は
そんな壷あるわけない

** 常識超えたところに世界の真理がある
秘密の数字目・指・し・て 1！2！9ーーー！！

** ヘラヘラニヤけながらゲラゲラ笑いながら
うっざー！因幡ウサギ可愛げもないのに
新参の厨どもはホイ☆ホイ☆ホイ☆

** 再生百万回　もれなく　愚民なんて
どういう　ことなのよ　どっちらかって言うなら
サーバー管理も　お疲れさんってとこね

** わかった！アタイがあまりにも天才だから
嫉妬してるんでしょ～？
ほんと　しょうがないわねぇ
せっかくだからアタイの天才の秘訣を
ちょっとだけ教えてあげてもいいわよ？

** あらゆるあらゆるあらゆるあらゆる
あらゆる英知を
集めて集めて集めて集めて束ねても
あたいのあたいのあたいの
あたいのあたいの丈夫な
頭に頭に頭に頭にかなわない

** 朝飯朝飯朝飯朝飯
朝飯朝飯食べたら
赤子の赤子の赤子の赤子の手をひねる
あたいはあたいはあたいはあたいは
あたいはあたいは完璧
いわゆるいわゆるいわゆるいわゆるパーフェクト

** ひゃ～くおくちょうまん　バッチリ☆

** ヤマ　オチ　意味など無いわ
キャラクター立てば　いいのよ
元気があれば　な・ん・で・も 1！2！9ーーー！！

** くるくる　時計の針　ぐるぐる　頭回る
だって　つぶら目玉　二つしかないのに
三本の針なんて　ちんぷんかん

** 次々　問題出る　まだまだ　授業続く
凍る　部屋の中
ひんやりした温度も時間も　気にせず
ゆっくりしていってね!!!

** (バーカ！バーカ！　バーカ！バーカ！バーカ！バーカ！)
チルノ「バーカ！バーカ！」
(バーカ！バーカ！　バーカ！バーカ！バーカ！バーカ！)
チルノ「バーカ！バーカ！」
(バーカ！バーカ！　バーカ！バーカ！バーカ！バーカ！)
チルノ「もう馬鹿でいいわよ！知らないっ！！」
(バーカ！バーカ！バーカ！バーカ！)



* COMMENT Original

** みんなぁ～！　

*** チルノの算数教室始まるよー☆

*** あたいみたいな天才目指して、

*** 頑張っていってねー！

** キラキラ　ダイヤモンド　

*** 輝く　星のように

*** 栄光　志望校　なんとかして入ろう

*** 天才　秀才　トップ目指して GO GO!!

** （バーカ！バーカ！バーカ！バーカ！バーカ！バーカ！)

*** チルノ「ちょっ…違っ…馬鹿じゃないもん！」

*** (バーカ！バーカ！　バーカ！バーカ！バーカ！バーカ！)

*** チルノ「馬鹿って言う方が馬鹿なのよぉ！」

*** (バーカ！バーカ！バーカ！バーカ！バーカ！バーカ！)

*** チルノ「なにようるさいわね　この馬鹿っ！」

*** (バーカ！バーカ！バーカ！バーカ！)

** 紅魔館からバスが出て始めに3人乗りました

*** 白玉楼で一人降りて半人(はんじん)だけ乗りました

*** 八雲さん家で二人降りて 結局乗客合計何人だ？

*** 答えは答えは　0人　0人

*** なぜならなぜなら　そ・れ・は

*** 幻想郷にバス無い☆

** ヤマ　オチ　意味など無いわ

*** キャラクター立てば　いいのよ

*** 元気があれば　な・ん・で・も 1 2 9!

** くるくる　時計の針　ぐるぐる　頭回る

*** だって　つぶら目玉　二つしかないのに

*** 三本の針なんて　ちんぷんかん

*** 次々　問題出る　まだまだ　授業続く

*** 凍る　部屋の中

*** ひんやりした温度も時間も　気にせず

*** ゆっくりしていってね!!!

** (バーカ！バーカ！バーカ！バーカ！バーカ！バーカ！)
チルノ「だからバカじゃないって言ってるでしょ！」
(バーカ！バーカ！バーカ！バーカ！バーカ！バーカ！)
チルノ「いい加減にしないと冷凍するわよ！」
(バーカ！バーカ！バーカ！バーカ！バーカ！バーカ！)
チルノ「そして粉々になって死ねばいいのよ！」
(バーカ！バーカ！バーカ！バーカ！)

** 霊夢んとこの100万円の壷を誰かが割っちゃった
永遠亭のえーりんが弁償しに来ましたよ
知らんぷりのイタズラてゐ 結局 賠償金額いくら？
答えは答えは　0円　0円
なぜならなぜなら　そ・れ・は
そんな壷あるわけない

** 常識超えたところに世界の真理がある
秘密の数字目・指・し・て 1！2！9ーーー！！

** ヘラヘラニヤけながらゲラゲラ笑いながら
うっざー！因幡ウサギ可愛げもないのに
新参の厨どもはホイ☆ホイ☆ホイ☆

** 再生百万回　もれなく　愚民なんて
どういう　ことなのよ　どっちらかって言うなら
サーバー管理も　お疲れさんってとこね

** わかった！アタイがあまりにも天才だから
嫉妬してるんでしょ～？
ほんと　しょうがないわねぇ
せっかくだからアタイの天才の秘訣を
ちょっとだけ教えてあげてもいいわよ？

** あらゆるあらゆるあらゆるあらゆる
あらゆる英知を
集めて集めて集めて集めて束ねても
あたいのあたいのあたいの
あたいのあたいの丈夫な
頭に頭に頭に頭にかなわない

** 朝飯朝飯朝飯朝飯
朝飯朝飯食べたら
赤子の赤子の赤子の赤子の手をひねる
あたいはあたいはあたいはあたいは
あたいはあたいは完璧
いわゆるいわゆるいわゆるいわゆるパーフェクト

** ひゃ～くおくちょうまん　バッチリ☆

** ヤマ　オチ　意味など無いわ
キャラクター立てば　いいのよ
元気があれば　な・ん・で・も 1！2！9ーーー！！

** くるくる　時計の針　ぐるぐる　頭回る
だって　つぶら目玉　二つしかないのに
三本の針なんて　ちんぷんかん

** 次々　問題出る　まだまだ　授業続く
凍る　部屋の中
ひんやりした温度も時間も　気にせず
ゆっくりしていってね!!!

** (バーカ！バーカ！　バーカ！バーカ！バーカ！バーカ！)
チルノ「バーカ！バーカ！」
(バーカ！バーカ！　バーカ！バーカ！バーカ！バーカ！)
チルノ「バーカ！バーカ！」
(バーカ！バーカ！　バーカ！バーカ！バーカ！バーカ！)
チルノ「もう馬鹿でいいわよ！知らないっ！！」
(バーカ！バーカ！バーカ！バーカ！)

